/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.vinc.confluentkafkaconsumer.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AccountLedgerEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 630077215451622150L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountLedgerEvent\",\"namespace\":\"com.vinc.confluentkafkaconsumer.avro\",\"fields\":[{\"name\":\"event_id\",\"type\":\"string\",\"doc\":\"Unique identifier for the event\"},{\"name\":\"transaction_type\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionType\",\"symbols\":[\"WITHDRAWAL\",\"DEPOSIT\",\"TRANSFER\"]},\"doc\":\"Type of the transaction\"},{\"name\":\"source_account_id\",\"type\":[\"null\",\"string\"],\"doc\":\"Account ID initiating the transaction, or null if not applicable\",\"default\":null},{\"name\":\"destination_account_id\",\"type\":[\"null\",\"string\"],\"doc\":\"Account ID receiving the transaction, or null if not applicable\",\"default\":null},{\"name\":\"amount\",\"type\":\"double\",\"doc\":\"Amount involved in the transaction\"},{\"name\":\"currency\",\"type\":\"string\",\"doc\":\"Currency of the transaction amount, e.g., USD, EUR\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp of when the transaction occurred\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionStatus\",\"symbols\":[\"PENDING\",\"COMPLETED\",\"FAILED\"]},\"doc\":\"Status of the transaction\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<AccountLedgerEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AccountLedgerEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AccountLedgerEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AccountLedgerEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AccountLedgerEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AccountLedgerEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AccountLedgerEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AccountLedgerEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AccountLedgerEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the event */
  private java.lang.CharSequence event_id;
  /** Type of the transaction */
  private com.vinc.confluentkafkaconsumer.avro.TransactionType transaction_type;
  /** Account ID initiating the transaction, or null if not applicable */
  private java.lang.CharSequence source_account_id;
  /** Account ID receiving the transaction, or null if not applicable */
  private java.lang.CharSequence destination_account_id;
  /** Amount involved in the transaction */
  private double amount;
  /** Currency of the transaction amount, e.g., USD, EUR */
  private java.lang.CharSequence currency;
  /** Timestamp of when the transaction occurred */
  private java.time.Instant timestamp;
  /** Status of the transaction */
  private com.vinc.confluentkafkaconsumer.avro.TransactionStatus status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccountLedgerEvent() {}

  /**
   * All-args constructor.
   * @param event_id Unique identifier for the event
   * @param transaction_type Type of the transaction
   * @param source_account_id Account ID initiating the transaction, or null if not applicable
   * @param destination_account_id Account ID receiving the transaction, or null if not applicable
   * @param amount Amount involved in the transaction
   * @param currency Currency of the transaction amount, e.g., USD, EUR
   * @param timestamp Timestamp of when the transaction occurred
   * @param status Status of the transaction
   */
  public AccountLedgerEvent(java.lang.CharSequence event_id, com.vinc.confluentkafkaconsumer.avro.TransactionType transaction_type, java.lang.CharSequence source_account_id, java.lang.CharSequence destination_account_id, java.lang.Double amount, java.lang.CharSequence currency, java.time.Instant timestamp, com.vinc.confluentkafkaconsumer.avro.TransactionStatus status) {
    this.event_id = event_id;
    this.transaction_type = transaction_type;
    this.source_account_id = source_account_id;
    this.destination_account_id = destination_account_id;
    this.amount = amount;
    this.currency = currency;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.status = status;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return event_id;
    case 1: return transaction_type;
    case 2: return source_account_id;
    case 3: return destination_account_id;
    case 4: return amount;
    case 5: return currency;
    case 6: return timestamp;
    case 7: return status;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: event_id = (java.lang.CharSequence)value$; break;
    case 1: transaction_type = (com.vinc.confluentkafkaconsumer.avro.TransactionType)value$; break;
    case 2: source_account_id = (java.lang.CharSequence)value$; break;
    case 3: destination_account_id = (java.lang.CharSequence)value$; break;
    case 4: amount = (java.lang.Double)value$; break;
    case 5: currency = (java.lang.CharSequence)value$; break;
    case 6: timestamp = (java.time.Instant)value$; break;
    case 7: status = (com.vinc.confluentkafkaconsumer.avro.TransactionStatus)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'event_id' field.
   * @return Unique identifier for the event
   */
  public java.lang.CharSequence getEventId() {
    return event_id;
  }


  /**
   * Sets the value of the 'event_id' field.
   * Unique identifier for the event
   * @param value the value to set.
   */
  public void setEventId(java.lang.CharSequence value) {
    this.event_id = value;
  }

  /**
   * Gets the value of the 'transaction_type' field.
   * @return Type of the transaction
   */
  public com.vinc.confluentkafkaconsumer.avro.TransactionType getTransactionType() {
    return transaction_type;
  }


  /**
   * Sets the value of the 'transaction_type' field.
   * Type of the transaction
   * @param value the value to set.
   */
  public void setTransactionType(com.vinc.confluentkafkaconsumer.avro.TransactionType value) {
    this.transaction_type = value;
  }

  /**
   * Gets the value of the 'source_account_id' field.
   * @return Account ID initiating the transaction, or null if not applicable
   */
  public java.lang.CharSequence getSourceAccountId() {
    return source_account_id;
  }


  /**
   * Sets the value of the 'source_account_id' field.
   * Account ID initiating the transaction, or null if not applicable
   * @param value the value to set.
   */
  public void setSourceAccountId(java.lang.CharSequence value) {
    this.source_account_id = value;
  }

  /**
   * Gets the value of the 'destination_account_id' field.
   * @return Account ID receiving the transaction, or null if not applicable
   */
  public java.lang.CharSequence getDestinationAccountId() {
    return destination_account_id;
  }


  /**
   * Sets the value of the 'destination_account_id' field.
   * Account ID receiving the transaction, or null if not applicable
   * @param value the value to set.
   */
  public void setDestinationAccountId(java.lang.CharSequence value) {
    this.destination_account_id = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Amount involved in the transaction
   */
  public double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * Amount involved in the transaction
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return Currency of the transaction amount, e.g., USD, EUR
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * Currency of the transaction amount, e.g., USD, EUR
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp of when the transaction occurred
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp of when the transaction occurred
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'status' field.
   * @return Status of the transaction
   */
  public com.vinc.confluentkafkaconsumer.avro.TransactionStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * Status of the transaction
   * @param value the value to set.
   */
  public void setStatus(com.vinc.confluentkafkaconsumer.avro.TransactionStatus value) {
    this.status = value;
  }

  /**
   * Creates a new AccountLedgerEvent RecordBuilder.
   * @return A new AccountLedgerEvent RecordBuilder
   */
  public static com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder newBuilder() {
    return new com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder();
  }

  /**
   * Creates a new AccountLedgerEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccountLedgerEvent RecordBuilder
   */
  public static com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder newBuilder(com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder other) {
    if (other == null) {
      return new com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder();
    } else {
      return new com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder(other);
    }
  }

  /**
   * Creates a new AccountLedgerEvent RecordBuilder by copying an existing AccountLedgerEvent instance.
   * @param other The existing instance to copy.
   * @return A new AccountLedgerEvent RecordBuilder
   */
  public static com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder newBuilder(com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent other) {
    if (other == null) {
      return new com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder();
    } else {
      return new com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for AccountLedgerEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountLedgerEvent>
    implements org.apache.avro.data.RecordBuilder<AccountLedgerEvent> {

    /** Unique identifier for the event */
    private java.lang.CharSequence event_id;
    /** Type of the transaction */
    private com.vinc.confluentkafkaconsumer.avro.TransactionType transaction_type;
    /** Account ID initiating the transaction, or null if not applicable */
    private java.lang.CharSequence source_account_id;
    /** Account ID receiving the transaction, or null if not applicable */
    private java.lang.CharSequence destination_account_id;
    /** Amount involved in the transaction */
    private double amount;
    /** Currency of the transaction amount, e.g., USD, EUR */
    private java.lang.CharSequence currency;
    /** Timestamp of when the transaction occurred */
    private java.time.Instant timestamp;
    /** Status of the transaction */
    private com.vinc.confluentkafkaconsumer.avro.TransactionStatus status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.event_id)) {
        this.event_id = data().deepCopy(fields()[0].schema(), other.event_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.transaction_type)) {
        this.transaction_type = data().deepCopy(fields()[1].schema(), other.transaction_type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.source_account_id)) {
        this.source_account_id = data().deepCopy(fields()[2].schema(), other.source_account_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.destination_account_id)) {
        this.destination_account_id = data().deepCopy(fields()[3].schema(), other.destination_account_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing AccountLedgerEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.event_id)) {
        this.event_id = data().deepCopy(fields()[0].schema(), other.event_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transaction_type)) {
        this.transaction_type = data().deepCopy(fields()[1].schema(), other.transaction_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source_account_id)) {
        this.source_account_id = data().deepCopy(fields()[2].schema(), other.source_account_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.destination_account_id)) {
        this.destination_account_id = data().deepCopy(fields()[3].schema(), other.destination_account_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'event_id' field.
      * Unique identifier for the event
      * @return The value.
      */
    public java.lang.CharSequence getEventId() {
      return event_id;
    }


    /**
      * Sets the value of the 'event_id' field.
      * Unique identifier for the event
      * @param value The value of 'event_id'.
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder setEventId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.event_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'event_id' field has been set.
      * Unique identifier for the event
      * @return True if the 'event_id' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'event_id' field.
      * Unique identifier for the event
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder clearEventId() {
      event_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_type' field.
      * Type of the transaction
      * @return The value.
      */
    public com.vinc.confluentkafkaconsumer.avro.TransactionType getTransactionType() {
      return transaction_type;
    }


    /**
      * Sets the value of the 'transaction_type' field.
      * Type of the transaction
      * @param value The value of 'transaction_type'.
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder setTransactionType(com.vinc.confluentkafkaconsumer.avro.TransactionType value) {
      validate(fields()[1], value);
      this.transaction_type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_type' field has been set.
      * Type of the transaction
      * @return True if the 'transaction_type' field has been set, false otherwise.
      */
    public boolean hasTransactionType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'transaction_type' field.
      * Type of the transaction
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder clearTransactionType() {
      transaction_type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'source_account_id' field.
      * Account ID initiating the transaction, or null if not applicable
      * @return The value.
      */
    public java.lang.CharSequence getSourceAccountId() {
      return source_account_id;
    }


    /**
      * Sets the value of the 'source_account_id' field.
      * Account ID initiating the transaction, or null if not applicable
      * @param value The value of 'source_account_id'.
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder setSourceAccountId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.source_account_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'source_account_id' field has been set.
      * Account ID initiating the transaction, or null if not applicable
      * @return True if the 'source_account_id' field has been set, false otherwise.
      */
    public boolean hasSourceAccountId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'source_account_id' field.
      * Account ID initiating the transaction, or null if not applicable
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder clearSourceAccountId() {
      source_account_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination_account_id' field.
      * Account ID receiving the transaction, or null if not applicable
      * @return The value.
      */
    public java.lang.CharSequence getDestinationAccountId() {
      return destination_account_id;
    }


    /**
      * Sets the value of the 'destination_account_id' field.
      * Account ID receiving the transaction, or null if not applicable
      * @param value The value of 'destination_account_id'.
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder setDestinationAccountId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.destination_account_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'destination_account_id' field has been set.
      * Account ID receiving the transaction, or null if not applicable
      * @return True if the 'destination_account_id' field has been set, false otherwise.
      */
    public boolean hasDestinationAccountId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'destination_account_id' field.
      * Account ID receiving the transaction, or null if not applicable
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder clearDestinationAccountId() {
      destination_account_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Amount involved in the transaction
      * @return The value.
      */
    public double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * Amount involved in the transaction
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder setAmount(double value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Amount involved in the transaction
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amount' field.
      * Amount involved in the transaction
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder clearAmount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * Currency of the transaction amount, e.g., USD, EUR
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * Currency of the transaction amount, e.g., USD, EUR
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.currency = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * Currency of the transaction amount, e.g., USD, EUR
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'currency' field.
      * Currency of the transaction amount, e.g., USD, EUR
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp of when the transaction occurred
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp of when the transaction occurred
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[6], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp of when the transaction occurred
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp of when the transaction occurred
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder clearTimestamp() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Status of the transaction
      * @return The value.
      */
    public com.vinc.confluentkafkaconsumer.avro.TransactionStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Status of the transaction
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder setStatus(com.vinc.confluentkafkaconsumer.avro.TransactionStatus value) {
      validate(fields()[7], value);
      this.status = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Status of the transaction
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'status' field.
      * Status of the transaction
      * @return This builder.
      */
    public com.vinc.confluentkafkaconsumer.avro.AccountLedgerEvent.Builder clearStatus() {
      status = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AccountLedgerEvent build() {
      try {
        AccountLedgerEvent record = new AccountLedgerEvent();
        record.event_id = fieldSetFlags()[0] ? this.event_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.transaction_type = fieldSetFlags()[1] ? this.transaction_type : (com.vinc.confluentkafkaconsumer.avro.TransactionType) defaultValue(fields()[1]);
        record.source_account_id = fieldSetFlags()[2] ? this.source_account_id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.destination_account_id = fieldSetFlags()[3] ? this.destination_account_id : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.amount = fieldSetFlags()[4] ? this.amount : (java.lang.Double) defaultValue(fields()[4]);
        record.currency = fieldSetFlags()[5] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.timestamp = fieldSetFlags()[6] ? this.timestamp : (java.time.Instant) defaultValue(fields()[6]);
        record.status = fieldSetFlags()[7] ? this.status : (com.vinc.confluentkafkaconsumer.avro.TransactionStatus) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AccountLedgerEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<AccountLedgerEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AccountLedgerEvent>
    READER$ = (org.apache.avro.io.DatumReader<AccountLedgerEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










